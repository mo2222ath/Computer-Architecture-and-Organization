// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// PROGRAM		"Quartus Prime"
// VERSION		"Version 18.1.0 Build 625 09/12/2018 SJ Lite Edition"
// CREATED		"Sat Oct 26 22:11:41 2019"

module Ex_34(
	Ta,
	Tb,
	Clk,
	La1,
	La0,
	Lb1,
	Lb0
);


input wire	Ta;
input wire	Tb;
input wire	Clk;
output wire	La1;
output wire	La0;
output wire	Lb1;
output wire	Lb0;

wire	SYNTHESIZED_WIRE_0;
wire	SYNTHESIZED_WIRE_1;
reg	SYNTHESIZED_WIRE_11;
reg	SYNTHESIZED_WIRE_12;
wire	SYNTHESIZED_WIRE_2;
wire	SYNTHESIZED_WIRE_3;
wire	SYNTHESIZED_WIRE_4;
wire	SYNTHESIZED_WIRE_5;
wire	SYNTHESIZED_WIRE_6;
wire	SYNTHESIZED_WIRE_7;
wire	SYNTHESIZED_WIRE_8;
wire	SYNTHESIZED_WIRE_9;
wire	SYNTHESIZED_WIRE_10;

assign	La1 = SYNTHESIZED_WIRE_11;



assign	SYNTHESIZED_WIRE_9 = SYNTHESIZED_WIRE_0 | SYNTHESIZED_WIRE_1;

assign	SYNTHESIZED_WIRE_3 =  ~SYNTHESIZED_WIRE_11;

assign	SYNTHESIZED_WIRE_4 =  ~SYNTHESIZED_WIRE_12;

assign	SYNTHESIZED_WIRE_5 =  ~Ta;

assign	SYNTHESIZED_WIRE_6 =  ~SYNTHESIZED_WIRE_11;

assign	Lb0 = SYNTHESIZED_WIRE_12 & SYNTHESIZED_WIRE_11;

assign	SYNTHESIZED_WIRE_7 =  ~SYNTHESIZED_WIRE_12;

assign	SYNTHESIZED_WIRE_8 =  ~Tb;

assign	La0 = SYNTHESIZED_WIRE_2 & SYNTHESIZED_WIRE_12;

assign	SYNTHESIZED_WIRE_1 = SYNTHESIZED_WIRE_3 & SYNTHESIZED_WIRE_4 & SYNTHESIZED_WIRE_5;

assign	SYNTHESIZED_WIRE_0 = SYNTHESIZED_WIRE_6 & SYNTHESIZED_WIRE_7 & SYNTHESIZED_WIRE_8;

assign	SYNTHESIZED_WIRE_10 = SYNTHESIZED_WIRE_11 ^ SYNTHESIZED_WIRE_12;

assign	SYNTHESIZED_WIRE_2 =  ~SYNTHESIZED_WIRE_11;

assign	Lb1 =  ~SYNTHESIZED_WIRE_11;


always@(posedge Clk)
begin
	begin
	SYNTHESIZED_WIRE_12 <= SYNTHESIZED_WIRE_9;
	end
end


always@(posedge Clk)
begin
	begin
	SYNTHESIZED_WIRE_11 <= SYNTHESIZED_WIRE_10;
	end
end


endmodule
